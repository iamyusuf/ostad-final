name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'finch-backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'finch-backend/**'

env:
  REGISTRY: docker.io
  IMAGE_NAME: finch-backend

jobs:
  test:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./finch-backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov flake8 black isort

    - name: Run linting with flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run code formatting check with black
      run: black --check .

    - name: Run import sorting check with isort
      run: isort --check-only .

    - name: Create test database
      run: |
        export DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb
        python manage.py migrate
      env:
        POSTGRES_DB: testdb
        POSTGRES_USER: testuser
        POSTGRES_PASSWORD: testpass
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        DJANGO_SETTINGS_MODULE: fleet.settings

    - name: Run unit tests
      run: |
        export DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb
        pytest --cov=. --cov-report=xml --cov-report=html
      env:
        POSTGRES_DB: testdb
        POSTGRES_USER: testuser
        POSTGRES_PASSWORD: testpass
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        DJANGO_SETTINGS_MODULE: fleet.settings

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./finch-backend/coverage.xml
        flags: backend

    - name: Run integration tests
      run: |
        export DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb
        python manage.py test --keepdb
      env:
        POSTGRES_DB: testdb
        POSTGRES_USER: testuser
        POSTGRES_PASSWORD: testpass
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        DJANGO_SETTINGS_MODULE: fleet.settings

  security-scan:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./finch-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit

    - name: Run safety check for vulnerabilities
      run: safety check

    - name: Run bandit security linter
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: finch-backend/bandit-report.json

    - name: Run Snyk security scan
      uses: snyk/actions/python@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-and-push:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    defaults:
      run:
        working-directory: ./finch-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./finch-backend
        file: ./finch-backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        path: ./finch-backend
        format: spdx-json

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Run database migrations
      run: |
        kubectl create job migrate-$(date +%s) --from=cronjob/django-migrate -n finch-staging
        kubectl wait --for=condition=complete --timeout=300s job/migrate-$(date +%s) -n finch-staging

    - name: Deploy to staging
      run: |
        kubectl set image deployment/finch-backend finch-backend=${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }} -n finch-staging
        kubectl rollout status deployment/finch-backend -n finch-staging

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Run database migrations
      run: |
        kubectl create job migrate-$(date +%s) --from=cronjob/django-migrate -n finch-production
        kubectl wait --for=condition=complete --timeout=300s job/migrate-$(date +%s) -n finch-production

    - name: Deploy to production
      run: |
        kubectl set image deployment/finch-backend finch-backend=${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }} -n finch-production
        kubectl rollout status deployment/finch-backend -n finch-production

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
