version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: finch_postgres
    environment:
      POSTGRES_DB: fleetdb
      POSTGRES_USER: roy77
      POSTGRES_PASSWORD: asdf1234@77
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./finch-backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U roy77 -d fleetdb"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - finch_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: finch_redis
    command: redis-server --appendonly yes --requirepass finch_redis_pass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - finch_network

  # Backend Django Application
  backend:
    build:
      context: ./finch-backend
      dockerfile: Dockerfile
    container_name: finch_backend
    environment:
      - DEBUG=True
      - POSTGRES_DB=fleetdb
      - POSTGRES_USER=roy77
      - POSTGRES_PASSWORD=asdf1234@77
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://:finch_redis_pass@redis:6379/0
      - CELERY_BROKER_URL=redis://:finch_redis_pass@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:finch_redis_pass@redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
      - DJANGO_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_EMAIL=admin@example.com
      - DJANGO_SUPERUSER_PASSWORD=admin123
    volumes:
      - ./finch-backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - finch_network
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build:
      context: ./finch-backend
      dockerfile: Dockerfile
    container_name: finch_celery_worker
    command: celery worker
    environment:
      - DEBUG=True
      - POSTGRES_DB=fleetdb
      - POSTGRES_USER=roy77
      - POSTGRES_PASSWORD=asdf1234@77
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://:finch_redis_pass@redis:6379/0
      - CELERY_BROKER_URL=redis://:finch_redis_pass@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:finch_redis_pass@redis:6379/0
    volumes:
      - ./finch-backend:/app
      - backend_media:/app/media
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - finch_network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./finch-backend
      dockerfile: Dockerfile
    container_name: finch_celery_beat
    command: celery beat
    environment:
      - DEBUG=True
      - POSTGRES_DB=fleetdb
      - POSTGRES_USER=roy77
      - POSTGRES_PASSWORD=asdf1234@77
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://:finch_redis_pass@redis:6379/0
      - CELERY_BROKER_URL=redis://:finch_redis_pass@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:finch_redis_pass@redis:6379/0
    volumes:
      - ./finch-backend:/app
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - finch_network
    restart: unless-stopped

  # Frontend Vue.js Application
  frontend:
    build:
      context: ./finch-frontend
      dockerfile: Dockerfile
    container_name: finch_frontend
    environment:
      - API_URL=http://localhost:8000/api
      - NODE_ENV=development
    volumes:
      - ./finch-frontend:/app
      - /app/node_modules
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - finch_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: finch_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - backend_static:/var/www/static:ro
      - backend_media:/var/www/media:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - finch_network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: finch_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - finch_network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: finch_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - finch_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_static:
    driver: local
  backend_media:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  finch_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
