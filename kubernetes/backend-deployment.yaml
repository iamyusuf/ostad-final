apiVersion: apps/v1
kind: Deployment
metadata:
  name: finch-backend
  namespace: finch-production
  labels:
    app: finch-backend
    component: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: finch-backend
  template:
    metadata:
      labels:
        app: finch-backend
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: finch-backend-sa
      containers:
      - name: finch-backend
        image: roy35/finch-backend:latest
        imagePullPolicy: Always
        env:
        - name: DEBUG
          value: "False"
        - name: POSTGRES_HOST
          value: postgresql
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database-name
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database-password
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: django-secret-key
        - name: ALLOWED_HOSTS
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: allowed-hosts
        - name: CORS_ALLOWED_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: cors-allowed-origins
        - name: CELERY_BROKER_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis-url
        - name: CELERY_RESULT_BACKEND
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis-url
        - name: STRIPE_PUBLISHABLE_KEY
          valueFrom:
            secretKeyRef:
              name: payment-secrets
              key: stripe-publishable-key
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: payment-secrets
              key: stripe-secret-key
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        volumeMounts:
        - name: media-storage
          mountPath: /app/media
        - name: static-storage
          mountPath: /app/staticfiles
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /health/
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health/
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: false
      initContainers:
      - name: wait-for-db
        image: postgres:15-alpine
        command:
          - sh
          - -c
          - |
            until pg_isready -h postgresql -p 5432 -U ${POSTGRES_USER}; do
              echo "Waiting for database..."
              sleep 2
            done
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database-user
      - name: migrate
        image: roy35/finch-backend:latest
        command:
          - python
          - manage.py
          - migrate
          - --noinput
        env:
        - name: POSTGRES_HOST
          value: postgresql
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database-name
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database-password
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: django-secret-key
      - name: collectstatic
        image: roy35/finch-backend:latest
        command:
          - python
          - manage.py
          - collectstatic
          - --noinput
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: django-secret-key
        volumeMounts:
        - name: static-storage
          mountPath: /app/staticfiles
      volumes:
      - name: media-storage
        persistentVolumeClaim:
          claimName: media-pvc
      - name: static-storage
        emptyDir: {}
      securityContext:
        fsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: finch-backend
  namespace: finch-production
  labels:
    app: finch-backend
    component: api
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: finch-backend
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: finch-backend-sa
  namespace: finch-production
  labels:
    app: finch-backend
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: finch-production
data:
  allowed-hosts: "finch.example.com,api.finch.example.com,localhost"
  cors-allowed-origins: "https://finch.example.com,https://www.finch.example.com"
  debug: "False"
  log-level: "INFO"
