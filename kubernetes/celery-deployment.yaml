apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  namespace: finch-production
  labels:
    app: celery-worker
    component: worker
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: celery-worker
  template:
    metadata:
      labels:
        app: celery-worker
        component: worker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: finch-backend-sa
      containers:
      - name: celery-worker
        image: roy35/finch-backend:latest
        imagePullPolicy: Always
        command:
          - celery
          - -A
          - fleet
          - worker
          - --loglevel=info
          - --concurrency=4
          - --prefetch-multiplier=1
        env:
        - name: POSTGRES_HOST
          value: postgresql
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database-name
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database-password
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis-url
        - name: CELERY_BROKER_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis-url
        - name: CELERY_RESULT_BACKEND
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: django-secret-key
        volumeMounts:
        - name: media-storage
          mountPath: /app/media
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: false
      volumes:
      - name: media-storage
        persistentVolumeClaim:
          claimName: media-pvc
      securityContext:
        fsGroup: 1000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-beat
  namespace: finch-production
  labels:
    app: celery-beat
    component: scheduler
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: celery-beat
  template:
    metadata:
      labels:
        app: celery-beat
        component: scheduler
    spec:
      serviceAccountName: finch-backend-sa
      containers:
      - name: celery-beat
        image: roy35/finch-backend:latest
        imagePullPolicy: Always
        command:
          - celery
          - -A
          - fleet
          - beat
          - --loglevel=info
          - --scheduler=django_celery_beat.schedulers:DatabaseScheduler
        env:
        - name: POSTGRES_HOST
          value: postgresql
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database-name
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database-password
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis-url
        - name: CELERY_BROKER_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis-url
        - name: CELERY_RESULT_BACKEND
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: django-secret-key
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: false
      securityContext:
        fsGroup: 1000
