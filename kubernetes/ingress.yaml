apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: finch-ingress
  namespace: finch-production
  labels:
    app: finch-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://finch.example.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  tls:
  - hosts:
    - finch.example.com
    - api.finch.example.com
    secretName: finch-tls-secret
  rules:
  - host: finch.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: finch-frontend
            port:
              number: 80
  - host: api.finch.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: finch-backend
            port:
              number: 8000
      - path: /admin
        pathType: Prefix
        backend:
          service:
            name: finch-backend
            port:
              number: 8000
      - path: /media
        pathType: Prefix
        backend:
          service:
            name: finch-backend
            port:
              number: 8000
      - path: /static
        pathType: Prefix
        backend:
          service:
            name: finch-backend
            port:
              number: 8000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: finch-ingress-staging
  namespace: finch-staging
  labels:
    app: finch-ingress
    environment: staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Staging Environment'
spec:
  tls:
  - hosts:
    - staging.finch.example.com
    - api-staging.finch.example.com
    secretName: finch-staging-tls-secret
  rules:
  - host: staging.finch.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: finch-frontend
            port:
              number: 80
  - host: api-staging.finch.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: finch-backend
            port:
              number: 8000
      - path: /admin
        pathType: Prefix
        backend:
          service:
            name: finch-backend
            port:
              number: 8000
---
apiVersion: v1
kind: Secret
metadata:
  name: basic-auth
  namespace: finch-staging
type: Opaque
data:
  auth: YWRtaW46JGFwcjEkSDY1dnV3eDckQWRTdVBXZjBQQWJLU0k4ZHdTSUQ4MA== # admin:staging123
