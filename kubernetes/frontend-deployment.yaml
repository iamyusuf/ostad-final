apiVersion: apps/v1
kind: Deployment
metadata:
  name: finch-frontend
  namespace: finch-production
  labels:
    app: finch-frontend
    component: web
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: finch-frontend
  template:
    metadata:
      labels:
        app: finch-frontend
        component: web
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: finch-frontend-sa
      containers:
      - name: finch-frontend
        image: roy35/finch-frontend:latest
        imagePullPolicy: Always
        env:
        - name: API_URL
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: api-url
        - name: NODE_ENV
          value: "production"
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 101
          runAsGroup: 101
          readOnlyRootFilesystem: true
      securityContext:
        fsGroup: 101
---
apiVersion: v1
kind: Service
metadata:
  name: finch-frontend
  namespace: finch-production
  labels:
    app: finch-frontend
    component: web
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: finch-frontend
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: finch-frontend-sa
  namespace: finch-production
  labels:
    app: finch-frontend
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: finch-production
data:
  api-url: "https://api.finch.example.com/api"
  app-name: "Finch Application"
  environment: "production"
